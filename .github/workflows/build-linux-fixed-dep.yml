name: build-linux-fixed-dep
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build-openCV-with-QT:
    runs-on: ubuntu-latest
    steps:
      # this will restore/cache everything depending on cache hit/miss
      - name: Cache QT and openCV
        uses: actions/cache/@v3
        id: cache-openCV-QT
        with:
          path: |
            build_openCV\install\lib\*
            build_openCV\install\include\*
            5.15.2\gcc_64\bin\*
            5.15.2\gcc_64\include\*
            5.15.2\gcc_64\lib\*
            5.15.2\gcc_64\mkspecs\*
            5.15.2\gcc_64\plugins\platforms\*
            5.15.2\gcc_64\plugins\imageformats\*
          key: ${{ runner.os }}-openCV-4.6.0-QT-5.15.2

      #- name: add minGW to path
      #  if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
      #  shell: bash
      #  run: echo "${{github.workspace}}\Tools\mingw810_64\bin" >> $GITHUB_PATH
      - name: install aqtinstall tool
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        run: pip install aqtinstall
      - name: install QT
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        run: aqt install-qt linux desktop 5.15.2 gcc_64 -m qtcharts qtdatavis3d
      - uses: actions/checkout@v3
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        with: 
          repository: 'opencv/opencv'
          ref: '4.6.0'
          path: './openCV'
      - name: cmake generate
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        run: cmake -G "Unix Makefiles" -S openCV -B build_openCV -D WITH_QT=ON -D WITH_OPENGL=ON -D Qt5_DIR=:./5.15.2/mingw81_64/lib/cmake/Qt5
      - name: cmake generate again
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        run: cmake -G "Unix Makefiles" -S openCV -B build_openCV
      - name: cmake build
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        run: cmake --build ./build_openCV -j4
      - name: cmake install
        if: steps.cache-openCV-QT.outputs.cache-hit != 'true'
        run: sudo cmake --install ./build_opencv --prefix ./build_opencv/install

  build-QWT:
    runs-on: ubuntu-latest
    steps:
      # this will restore/cache everything depending on cache hit/miss
      - name: cache QWT
        uses: actions/cache/@v3
        id: cache-QWT
        with:
          path: |
            qwt-6.1.6\src
            qwt-6.1.6\lib\*
          key: ${{ runner.os }}-QWT-6.1.6

      # all what follows is only run on cache miss
      #- name: add minGW to path
      #  if: steps.cache-QWT.outputs.cache-hit != 'true'
      #  shell: bash
      #  run: echo "${{github.workspace}}\Tools\mingw810_64\bin" >> $GITHUB_PATH
      - name: install openGl libs
        run: sudo apt install libgl-dev 
      - name: download QWT
        if: steps.cache-QWT.outputs.cache-hit != 'true'
        # I specified the mirror because one of the random mirrors did not work during my tests
        run: wget -O qwt-6.1.6.zip https://sourceforge.net/projects/qwt/files/qwt/6.1.6/qwt-6.1.6.zip/download?use_mirror=pilotfiber
      - name: extract archive
        if: steps.cache-QWT.outputs.cache-hit != 'true'
        run: 7z x qwt-6.1.6.zip
      - name: install aqtinstall tool
        if: steps.cache-QWT.outputs.cache-hit != 'true'
        run: pip install aqtinstall
      - name: install qmake
        if: steps.cache-QWT.outputs.cache-hit != 'true'
        run: aqt install-qt linux desktop 5.15.2 gcc_64 --archives qtbase qtsvg
      - name: qmake
        if: steps.cache-QWT.outputs.cache-hit != 'true'
        run: cd qwt-6.1.6 ; ../5.15.2/gcc_64/bin/qmake
      - name: build
        if: steps.cache-QWT.outputs.cache-hit != 'true'
        run: cd qwt-6.1.6 ; make -j4

  build-armadillo:
    runs-on: ubuntu-latest
    steps:
      # this will restore/cache everything depending on cache hit/miss
      - name: Cache armadillo build
        id: cache-armadillo
        uses: actions/cache@v3
        with:
          path: |
            build_armadillo\libarmadillo.*
            build_armadillo\tmp\include
          key: ${{ runner.os }}-armadillo-11.4.0

      # all what follows is only run on cache miss
      #- name: add minGW to path
      #  if: steps.cache-armadillo.outputs.cache-hit != 'true'
      #  shell: bash
      #  run: echo "${{github.workspace}}\Tools\mingw810_64\bin" >> $GITHUB_PATH
      - name: download armadillo
        if: steps.cache-armadillo.outputs.cache-hit != 'true'
        # I specified the mirror because one of the random mirrors did not work during my tests
        run: wget -O armadillo-11.4.4.tar.xz http://sourceforge.net/projects/arma/files/armadillo-11.4.4.tar.xz/download?use_mirror=versaweb
      # Extract in two step. First step write to stdo and second step read from stdi.
      # This avoids intermediate file creation
      # It must run in CMD because powershell corrupts pipes
      - name: extract archive
        if: steps.cache-armadillo.outputs.cache-hit != 'true'
        run: 7z x -so armadillo-11.4.4.tar.xz | 7z x -si -ttar
      - name: cmake generate
        if: steps.cache-armadillo.outputs.cache-hit != 'true'
        run: cmake -G "Unix Makefiles" -S armadillo-11.4.4 -B build_armadillo
      - name: cmake build
        if: steps.cache-armadillo.outputs.cache-hit != 'true'
        run: cmake --build ./build_armadillo -j4

  build-lapack:
    runs-on: ubuntu-latest
    steps:
      # this will restore/cache everything depending on cache hit/miss
      - name: Cache lapack build
        id: cache-lapack
        uses: actions/cache@v3
        with:
          path: |
            build_lapack\lib\liblapack.a
            build_lapack\lib\libblas.a
          key: ${{ runner.os }}-lapack-3.11.0

      # all what follows is only run on cache miss
      #- name: add minGW to path
      #  if: steps.cache-lapack.outputs.cache-hit != 'true'
      #  shell: bash
      #  run: echo "${{github.workspace}}\Tools\mingw810_64\bin" >> $GITHUB_PATH
      - uses: actions/checkout@v3 
        if: steps.cache-lapack.outputs.cache-hit != 'true'
        with: 
          repository: 'Reference-LAPACK/lapack'
          ref: 'v3.11.0'
          path: './lapack'
      # remove test compiler because https://github.com/Reference-LAPACK/lapack/issues/305 not needed to create DLL
      - name: cmake generate
        if: steps.cache-lapack.outputs.cache-hit != 'true'
        run: cmake -G "Unix Makefiles" -S lapack -B build_lapack -D TEST_FORTRAN_COMPILER=OFF
      - name: cmake build
        if: steps.cache-lapack.outputs.cache-hit != 'true'
        run: cmake --build ./build_lapack -j4

  build-DFTFringe:
    runs-on: ubuntu-latest
    needs: [build-lapack, build-armadillo, build-QWT, build-openCV-with-QT]
    steps:
      #- name: add minGW to path
      #  shell: bash
      #  run: echo "${{github.workspace}}\Tools\mingw810_64\bin" >> $GITHUB_PATH
      # restore cached lapack
      - uses: actions/cache/restore@v3
        id: cache-lapack
        with:
          path: |
            build_lapack\lib\liblapack.a
            build_lapack\lib\libblas.a
          key: ${{ runner.os }}-lapack-3.11.0
          fail-on-cache-miss: true
      # restore cached armadillo
      - uses: actions/cache/restore@v3
        id: cache-armadillo
        with:
          path: |
            build_armadillo\libarmadillo.*
            build_armadillo\tmp\include
          key: ${{ runner.os }}-armadillo-11.4.0
          fail-on-cache-miss: true
      # restore cached QWT
      - uses: actions/cache/restore@v3
        id: cache-QWT
        with:
          path: |
            qwt-6.1.6\src
            qwt-6.1.6\lib\*
          key: ${{ runner.os }}-QWT-6.1.6
          fail-on-cache-miss: true
      # restore cached openCV and QT
      - uses: actions/cache/restore@v3
        id: cache-openCV-QT
        with:
          path: |
            build_openCV\install\lib\*
            build_openCV\install\include\*
            5.15.2\gcc_64\bin\*
            5.15.2\gcc_64\include\*
            5.15.2\gcc_64\lib\*
            5.15.2\gcc_64\mkspecs\*
            5.15.2\gcc_64\plugins\platforms\*
            5.15.2\gcc_64\plugins\imageformats\*
          key: ${{ runner.os }}-openCV-4.6.0-QT-5.15.2
          fail-on-cache-miss: true
      
      - uses: actions/checkout@v3
        with: 
          path: 'DFTFringe'

      - run: cd DFTFringe ; ../5.15.2/gcc_64/bin/qmake.exe
      - run: cd DFTFringe ; make -j4
      # TODO make an installer and upload artifact